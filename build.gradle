plugins {
    id 'java'
    id 'application'
}

group = 'com.thojensen'
version = '0.1.0'

repositories {
    mavenCentral()
    maven { url 'https://repo.eclipse.org/content/groups/releases/' }
}

ext { swtVersion = '3.122.0' }

def osgiPlatform = {
    def os = System.getProperty('os.name').toLowerCase()
    def arch = System.getProperty('os.arch').toLowerCase()

    if (os.contains('win')) {
        return 'win32.win32.x86_64'
    } else if (os.contains('mac')) {
        return arch.contains('aarch64') ? 'cocoa.macosx.aarch64' : 'cocoa.macosx.x86_64'
    } else if (os.contains('linux')) {
        return 'gtk.linux.x86_64'
    } else {
        throw new GradleException("Unsupported operating system or architecture")
    }
}()

configurations.configureEach {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        if (details.requested.group == 'org.eclipse.platform' && details.requested.name.startsWith('org.eclipse.swt')) {
            details.useTarget group: details.requested.group, name: "org.eclipse.swt.${osgiPlatform}", version: details.requested.version
        }
    }
}

dependencies {
    implementation "org.eclipse.platform:org.eclipse.swt:${swtVersion}"
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
}

application { mainClass = 'com.thojensen.launcher.Launcher' }

jar {
    manifest {
        attributes 'Main-Class': 'com.thojensen.launcher.Launcher'
    }
}

tasks.register('fatJar', Jar) {
    archiveClassifier = 'fat'
    from sourceSets.main.output
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    exclude 'org/eclipse/swt/**'
    manifest {
        attributes 'Main-Class': 'com.thojensen.launcher.Launcher'
    }
}

tasks.register('createDistributions', Zip) {
    archiveFileName = "calculator-${version}-distributions.zip"
    destinationDirectory = layout.buildDirectory.dir('distributions')

    from(tasks.named('fatJar'))

    ['win', 'mac', 'linux'].each { platform ->
        from(configurations.runtimeClasspath) {
            include "**/org.eclipse.swt.${platform}.${swtVersion}.jar"
            rename { filename -> "lib/${platform}/${filename}" }
        }
    }

    from('scripts') {
        include "run_*.sh"
        include "run_*.bat"
        into 'scripts'
    }
}

tasks.register('calculator', JavaExec) {
    mainClass = 'com.thojensen.calculator.Calculator'
    classpath = sourceSets.main.runtimeClasspath
    if (System.getProperty('os.name').toLowerCase().contains('mac')) {
        jvmArgs = ['-XstartOnFirstThread']
    }
}

tasks.register('snake', JavaExec) {
    mainClass = 'com.thojensen.snake.SnakeGame'
    classpath = sourceSets.main.runtimeClasspath
    if (System.getProperty('os.name').toLowerCase().contains('mac')) {
        jvmArgs = ['-XstartOnFirstThread']
    }
}

run {
    if (System.getProperty('os.name').toLowerCase().contains('mac')) {
        jvmArgs = ['-XstartOnFirstThread']
    }
}

test {
    useJUnitPlatform()
    if (System.getProperty('os.name').toLowerCase().contains('mac')) {
        jvmArgs = ['-XstartOnFirstThread']
    }
}